files_full <- list.files("specdata",full.names=T)
## specifes which IDs to look up
id_vec <- c(id)
## builds data files by combining only IDed (all) files
dati <- data.frame()
matrixans <- data.fram()
for (i in id_vec) {
dati <- read.csv(files_full[i])
datisulfate <- subset(dati,select=sulfate)
datinotnasulfate <- is.na(datisulfate)
datiwithoutnas <- dati[!datinotnasulfate]
counti <- length(datiwithoutnas)
matrixans[i,1] <- i
matrixand[i,2] <- counti
}
return(matrixans)
#matrix(i,counti,nrow=length(id_vec),ncol=2)
}
complete(c(1,6,4))
complete <- function(id) {
list.files("specdata")
files_full <- list.files("specdata",full.names=T)
## specifes which IDs to look up
id_vec <- c(id)
## builds data files by combining only IDed (all) files
dati <- data.frame()
matrixans <- data.frame()
for (i in id_vec) {
dati <- read.csv(files_full[i])
datisulfate <- subset(dati,select=sulfate)
datinotnasulfate <- is.na(datisulfate)
datiwithoutnas <- dati[!datinotnasulfate]
counti <- length(datiwithoutnas)
matrixans[i,1] <- i
matrixand[i,2] <- counti
}
return(matrixans)
#matrix(i,counti,nrow=length(id_vec),ncol=2)
}
complete(c(1,6,4))
complete <- function(id) {
list.files("specdata")
files_full <- list.files("specdata",full.names=T)
## specifes which IDs to look up
id_vec <- c(id)
## builds data files by combining only IDed (all) files
dati <- data.frame()
matrixans <- data.frame()
for (i in id_vec) {
dati <- read.csv(files_full[i])
datisulfate <- subset(dati,select=sulfate)
datinotnasulfate <- is.na(datisulfate)
datiwithoutnas <- dati[!datinotnasulfate]
counti <- length(datiwithoutnas)
matrixans[i,1] <- i
matrixans[i,2] <- counti
}
return(matrixans)
#matrix(i,counti,nrow=length(id_vec),ncol=2)
}
complete(c(1,6,4))
complete <- function(id) {
list.files("specdata")
files_full <- list.files("specdata",full.names=T)
## specifes which IDs to look up
id_vec <- c(id)
## builds data files by combining only IDed (all) files
dati <- data.frame()
matrixans <- data.frame()
for (i in id_vec) {
dati <- read.csv(files_full[i])
datisulfate <- subset(dati,select=sulfate)
datinotnasulfate <- is.na(datisulfate)
datiwithoutnas <- dati[!datinotnasulfate]
counti <- length(datiwithoutnas)
for (j in 1:length(id_vec)) {
matrixans[j,1] <- i
matrixans[j,2] <- counti
}
}
return(matrixans)
#matrix(i,counti,nrow=length(id_vec),ncol=2)
}
complete(c(1,6,4))
? or
? and
complete <- function(id) {
list.files("specdata")
files_full <- list.files("specdata",full.names=T)
## specifes which IDs to look up
id_vec <- c(id)
## builds data files by combining only IDed (all) files
dati <- data.frame()
matrixans <- data.frame()
for (i in id_vec) {
dati <- read.csv(files_full[i])
datisulfate <- subset(dati,select=sulfate)
datinitrate <- subset(dati,select=nitrate)
for (j in 1:length(datisulfate)) {
if (datisulfate(j)=="NA") | (datinitrate(j)=="NA") {
datinonans(j)=="NA"
} else {
datinonans(j)==datisulfate(j)
}
datinotinclnans <- is.na(datinonans)
datiwithoutnas <- datisulfate[!datinotinclnans]
counti <- length(datiwithoutnas)
for (j in 1:length(id_vec)) {
matrixans[j,1] <- i
matrixans[j,2] <- counti
}
}
return(matrixans)
#matrix(i,counti,nrow=length(id_vec),ncol=2)
}
complete <- function(id) {
list.files("specdata")
files_full <- list.files("specdata",full.names=T)
## specifes which IDs to look up
id_vec <- c(id)
## builds data files by combining only IDed (all) files
dati <- data.frame()
matrixans <- data.frame()
for (i in id_vec) {
dati <- read.csv(files_full[i])
datisulfate <- subset(dati,select=sulfate)
datinitrate <- subset(dati,select=nitrate)
for (j in 1:length(datisulfate)) {
if (datisulfate(j)!="NA") & (datinitrate(j)!="NA") {
datinonans(j)==datisulfate(j)
} else {
datinonans(j)=="NA"
}
datinotinclnans <- is.na(datinonans)
datiwithoutnas <- datisulfate[!datinotinclnans]
counti <- length(datiwithoutnas)
for (j in 1:length(id_vec)) {
matrixans[j,1] <- i
matrixans[j,2] <- counti
}
}
return(matrixans)
#matrix(i,counti,nrow=length(id_vec),ncol=2)
}
corr <- function(threshold=0) {
list.files("specdata")
files_full <- list.files("specdata",full.names=T)
dati <- data.frame()
daticc <- data.frame()
corvec <- data.frame()
filtereddati <- data.frame()
for (i in 1:332) {
dati <- read.csv(files_full[i])
daticc <- complete.cases(dati)
trimdaticc <- dati[daticc,]
if (length(trimdaticc >= threshold)) {
filtereddati <- rbind(trimdaticc)
corvec <- cor(filtereddati$sulfate,filtereddati$nitrate)
}
corvec
}
corr <- function(threshold=0) {
list.files("specdata")
files_full <- list.files("specdata",full.names=T)
dati <- data.frame()
daticc <- data.frame()
corvec <- data.frame()
filtereddati <- data.frame()
for (i in 1:332) {
dati <- read.csv(files_full[i])
daticc <- complete.cases(dati)
trimdaticc <- dati[daticc,]
if (length(trimdaticc >= threshold)) {
filtereddati <- rbind(trimdaticc)
corvec <- cor(filtereddati$sulfate,filtereddati$nitrate)
}
corvec
}
corr2 <- function(directory, threshold = 0) {
files <- list.files(directory, full.names = TRUE);
correlationList <- c();
index <- 1;
while (index <= length(files)) {
completeCases <- complete(directory, index);
if (completeCases$nobs > threshold) {
data <- read.csv(files[index], comment.char = "");
correlationList <- c(correlationList, cor(data$sulfate, data$nitrate, use = "complete.obs"));
}
index <- index +1;
}
correlationList;
}
corr2("specdata",400)
? complete
corr2 <- function(directory, threshold = 0) {
files <- list.files(directory, full.names = TRUE);
correlationList <- c();
index <- 1;
while (index <= length(files)) {
completeCases <- complete.cases(directory, index);
if (completeCases$nobs > threshold) {
data <- read.csv(files[index], comment.char = "");
correlationList <- c(correlationList, cor(data$sulfate, data$nitrate, use = "complete.obs"));
}
index <- index +1;
}
correlationList;
}
corr2("specdata",400)
pollutantmean <- function(pollutant, id) {
##pollutantfile = str("directpry/id.csv")
##pollutantdata = read.csv(directory)
list.files("specdata")
files_full <- list.files("specdata",full.names=T)
## specifes which IDs to look up
id_vec <- c(id)
## builds data files by combining only IDed files
dat <- data.frame()
for (i in id_vec) {
dat <- rbind(dat,read.csv(files_full[i]))
}
##dat_id <- dat[which(dat[,"ID"]==id,)]
##pollutant_name <- pollutant
##dataidpoll <- subset(dat,select=sulfate)
if (pollutant == "sulfate") {
dataidpoll <- subset(dat,select=sulfate)
}    else {
dataidpoll <- subset(dat,select=nitrate)
}
dataidpoll
if (pollutant == "sulfate") {
pollutantmeandata <- mean(dataidpoll$sulfate,na.rm=T)
}    else {
pollutantmeandata <- mean(dataidpoll$nitrate,na.rm=T)
}
##pollutantmeandata <- mean(dataidpoll$sulfate,na.rm=T)
return(pollutantmeandata)
}
pollutantmean("sulfate",1:10)
pollutantmean("nitrate",70:72)
? round
round(pollutantmean("nitrate",70:72),3)
round(pollutantmean("sulfate",34),3)
round(pollutantmean("nitrate"),3)
round(pollutantmean("nitrate",1:332),3)
complete <- function(id) {
list.files("specdata")
files_full <- list.files("specdata",full.names=T)
## specifes which IDs to look up
id_vec <- c(id)
## builds data files by combining only IDed (all) files
dati <- data.frame()
ans <- data.frame()
daticc <- data.frame()
datiwithoutnans <- data.frame()
trimans <- data.frame()
matrixans <- data.frame()
for (i in id_vec) {
dati <- read.csv(files_full[i])
#datisulfate <- subset(dati,select=sulfate)
#datinitrate <- subset(dati,select=nitrate)
daticc <- complete.cases(dati)
datiwithoutnans <- nrow(dati[daticc,])
ans[i,1] <- i
ans[i,2] <- datiwithoutnans
trimans <- complete.cases(ans)
matrixans <- ans[trimans,]
#for (j in 1:length(datisulfate)) {
#      if (datisulfate[j]!="NA") & (datinitrate[j]!="NA") {
#            datinonans[j]==datisulfate[j]
#      } else {
#            datinonans[j]=="NA"
#      }
#datinotinclnans <- is.na(datinonans)
#datiwithoutnas <- datisulfate[!datinotinclnans]
#for (j in 1:length(id_vec)) {
#      matrixans[j,1] <- i
#      matrixans[j,2] <- counti
#}
}
#ans <- cbind(ID=id_vec,nobs=datiwithoutnans)
#matrixans
#trimans <- ans[complete.cases(ans)]
matrixans
#matrix(i,counti,nrow=length(id_vec),ncol=2)
#########
#labels not quite right, should be 1,2,3,...
#order appears in order not as specified in vector
}
complete(1)
complete(c(2,4,8,10,12))
complete(c(6,10,20,34,100,200,310))
complete(c(54))
? set.seed
set.seed(42)
?sample
complete(332)
use<-sample(332,10)
print(use)
cc<-complete(332)
print(cc[use])
cc<-complete(332:1)
print(cc[use])
print(cc[use,])
round(pollutantmean("sulfate",34),3)
round(pollutantmean("nitrate",1:332),3)
complete(c(6,10,20,34,100,200,310))
complete(c(54))
library(datasets)
data(iris)
?iris
speciessub <- subset(iris, Species=="virginica")
mean(speciessub$Sepal.Length)
mean(iris$Sepal.Length)
mean(iris$Sepal.Width)
mean(iris$Petal.Length)
mean(iris$Petal.Width)
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:4], 1, mean)
apply(iris, 1, mean)
colMeans(iris)
rowMeans(iris[, 1:4])
apply(iris, 2, mean)
library(datasets)
data(mtcars)
?mtcars
split(mtcars, mtcars$cyl)
?split
with(mtcars, tapply(mpg, cyl, mean))
?mtcars
lapply(mtcars, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
sapply(mtcars, cyl, mean)
mean(mtcars$mpg, mtcars$cyl)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
apply(mtcars, 2, mean)
diffmpg <- tapply(mtcars$mpg, mtcars$cyl, mean)
diffmpg
round(diffmpg[1] - diffmpg[1],0)
round(diffmpg[1] - diffmpg[3],0)
round(diffmpg[2,1] - diffmpg[2,3],0)
diffmpg
diffmpg[3]
diffmpg[2,3]
diffmpg[3,2]
dim(diffmpg)
round(diffmpg[1] - diffmpg[3],1)
debug(ls)
?ls
?MTCARS
?mtcars
pi
i
complex(i)
##Hospital Assignment
hospdatatest <- read.csv("ProgAss3_data/hospital-data.csv")
outocdatatest <- read.csv("ProgAss3_data/outcome-of-care-measures.csv")
##outcome <- read.csv("ProgAss3_data/outcome-of-care-measures.csv", colClasses = "character")
##head(outcome)
##outcome[, 11] <- as.numeric(outcome[, 11])
##hist(outcome[, 11])
#best <- function(state, outcome) {
subooc <- data.frame(...,)
names(subooc) <- c("Hospital","State","Outcome")
outcomes <- c("heart attack"=11,"heart failure"=17,"pneumonia"=23)
outcome <- "heart failure"
## Read outcome data
outocdata <- read.csv("ProgAss3_data/outcome-of-care-measures.csv",na.strings = "Not Available",stringsAsFactors = F)
## Check that state and outcome are valid
#abcd <- rbind(c(1,2,3),c(4,5,6))
if (outcome == "heart attack") {
subooc <- outocdata[,C(2,7,outcomes[outcome])]
} else if (outcome == "heart failure") {
subooc <- outocdata[,C(2,7,17)]
} else if (outcome == "pneumonia") {
subooc <- outocdata[,C(2,7,23)]
} else
stop("invalid outcome")
#      names(subooc) <- c("Hospital","State","Outcome")
cleansub <- na.omit(subooc)
#     if (outcome == "heart attack") {
#           sub <- cbind(outocdata[,2],outocdata[,7],outocdata[,11])
#     } else if (outcome == "heart failure") {
#           sub <- cbind(outocdata[,2],outocdata[,7],outocdata[,17])
#     } else if (outcome == "pneumonia") {
#           sub <- cbind(outocdata[,2],outocdata[,7],outocdata[,23])
#     } else
#           stop("invalid outcome")
#      cleanbestsubordst <- cleanbestsub[order("State","Outcome"),]
#      stspdata <- split(cleanbestsubordst,cleanbestsubordst$State)
#      result <- lapply(stspdata,order(Hospital))
## Return hospital name in that state with lowest 30-day death
## rate
#      result
#}
##Hospital Assignment
hospdatatest <- read.csv("ProgAss3_data/hospital-data.csv")
outocdatatest <- read.csv("ProgAss3_data/outcome-of-care-measures.csv")
##outcome <- read.csv("ProgAss3_data/outcome-of-care-measures.csv", colClasses = "character")
##head(outcome)
##outcome[, 11] <- as.numeric(outcome[, 11])
##hist(outcome[, 11])
#best <- function(state, outcome) {
subooc <- data.frame(...,)
names(subooc) <- c("Hospital","State","Outcome")
outcomes <- c("heart attack"=11,"heart failure"=17,"pneumonia"=23)
outcome <- "heart failure"
## Read outcome data
outocdata <- read.csv("ProgAss3_data/outcome-of-care-measures.csv",na.strings = "Not Available",stringsAsFactors = F)
## Check that state and outcome are valid
if (outcome == "heart attack") {
subooc <- outocdata[,C(2,7,outcomes[outcome])]
} else if (outcome == "heart failure") {
subooc <- outocdata[,C(2,7,17)]
} else if (outcome == "pneumonia") {
subooc <- outocdata[,C(2,7,23)]
} else
stop("invalid outcome")
#      names(subooc) <- c("Hospital","State","Outcome")
cleansub <- na.omit(subooc)
#     if (outcome == "heart attack") {
#           sub <- cbind(outocdata[,2],outocdata[,7],outocdata[,11])
#     } else if (outcome == "heart failure") {
#           sub <- cbind(outocdata[,2],outocdata[,7],outocdata[,17])
#     } else if (outcome == "pneumonia") {
#           sub <- cbind(outocdata[,2],outocdata[,7],outocdata[,23])
#     } else
#           stop("invalid outcome")
#      cleanbestsubordst <- cleanbestsub[order("State","Outcome"),]
#      stspdata <- split(cleanbestsubordst,cleanbestsubordst$State)
#      result <- lapply(stspdata,order(Hospital))
## Return hospital name in that state with lowest 30-day death
## rate
#      result
#}
##Hospital Assignment
hospdatatest <- read.csv("ProgAss3_data/hospital-data.csv")
'outocdatatest <- read.csv("ProgAss3_data/outcome-of-care-measures.csv")
##outcome <- read.csv("ProgAss3_data/outcome-of-care-measures.csv", colClasses = "character")
##head(outcome)
##outcome[, 11] <- as.numeric(outcome[, 11])
##hist(outcome[, 11])
#best <- function(state, outcome) {
subooc <- data.frame(...,)
names(subooc) <- c("Hospital","State","Outcome")
outcomes <- c("heart attack"=11,"heart failure"=17,"pneumonia"=23)
outcome <- "heart failure"
## Read outcome data
outocdata <- read.csv("ProgAss3_data/outcome-of-care-measures.csv",na.strings = "Not Available",stringsAsFactors = F)
## Check that state and outcome are valid
if (outcome == "heart attack") {
subooc <- outocdata[,C(2,7,outcomes[outcome])]
} else if (outcome == "heart failure") {
subooc <- outocdata[,C(2,7,17)]
} else if (outcome == "pneumonia") {
subooc <- outocdata[,C(2,7,23)]
} else
stop("invalid outcome")
#      names(subooc) <- c("Hospital","State","Outcome")
cleansub <- na.omit(subooc)
#     if (outcome == "heart attack") {
#           sub <- cbind(outocdata[,2],outocdata[,7],outocdata[,11])
#     } else if (outcome == "heart failure") {
#           sub <- cbind(outocdata[,2],outocdata[,7],outocdata[,17])
#     } else if (outcome == "pneumonia") {
#           sub <- cbind(outocdata[,2],outocdata[,7],outocdata[,23])
#     } else
#           stop("invalid outcome")
#      cleanbestsubordst <- cleanbestsub[order("State","Outcome"),]
#      stspdata <- split(cleanbestsubordst,cleanbestsubordst$State)
#      result <- lapply(stspdata,order(Hospital))
## Return hospital name in that state with lowest 30-day death
## rate
#      result
#}
library(XML)
library(readxl)
getwd()
setwd("C:/Users/jjack_000/Desktop/Data Science JH course/Getting and Cleaning Data/GitHubRepo/datasciencecoursera")
## Final Assignment
## Getting and Cleaning Data Module
setwd("C:/Users/jjack_000/Desktop/Data Science JH course/Getting and Cleaning Data/GitHubRepo/datasciencecoursera")
##read in files from set directory
##################################################
##Change title of script to run_analysis when done
##################################################
ActLab <- read.table("./UCI HAR Dataset/activity_labels.txt",header = T)
dim(ActLab)
ActLab
## Final Assignment
## Getting and Cleaning Data Module
setwd("C:/Users/jjack_000/Desktop/Data Science JH course/Getting and Cleaning Data/GitHubRepo/datasciencecoursera")
##read in files from set directory
##################################################
##Change title of script to run_analysis when done
##################################################
ActLab <- read.table("./UCI HAR Dataset/activity_labels.txt",header = F)
ActLab
## Final Assignment
## Getting and Cleaning Data Module
setwd("C:/Users/jjack_000/Desktop/Data Science JH course/Getting and Cleaning Data/GitHubRepo/datasciencecoursera")
##read in files from set directory
##################################################
##Change title of script to run_analysis when done
##################################################
ActLab <- read.table("./UCI HAR Dataset/activity_labels.txt",header = F)
SubjectTest <- read.table("./UCI HAR Dataset/test/subject_test.txt",header = F)
head(SubjectTest)
tail(SubjectTest)
attributes(SubjectTest)
source('C:/Users/jjack_000/Desktop/Data Science JH course/Getting and Cleaning Data/GitHubRepo/datasciencecoursera/W4AssignmentScript.R')
